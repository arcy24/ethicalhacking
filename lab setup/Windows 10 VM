# Install Windows 10 VM 

#Create new VM in VirtualBox 

Windows 10 Setup (Using 22H2 ISO - Win 10 Pro)

Network Adapters from Left to Right in VirtualBox setup: right: Internal Network, Host-Only Network, NAT network adapter.

Go through the default Windows 10 setup and set Admin password.

Default host name: Win10
Default domain: testlab.local
HD Space 100 GB
Mem 2GB
Proc 4

Install Guest Additions CD Image


#Login to Windows 10 

#Open Powershell with Admin privilege and copy and paste the following commands

Write-Host "Make sure the network adapters are on for this VM first in this order: Internal, HostOnly, NAT"
Read-Host "Press any key to confirm this is done..."

        $netConfig = Get-NetIPConfiguration

        $global:newintalias = "nothing"

        foreach($thing in $netConfig)

        {

        if ($thing.InterfaceDescription -Like "*Desktop Adapter") {

                $newintalias = $thing.InterfaceAlias

           }

        }


# Get member with MT Desktop Adapter

New-NetIPAddress -IPAddress 10.0.0.64 -InterfaceAlias $newintalias -AddressFamily IPv4 -PrefixLength 24 -DefaultGateway 10.0.0.33
Set-DnsClientServerAddress -InterfaceAlias $newintalias -ServerAddress 10.0.0.33
        Rename-Computer -NewName BEHWIN10

        Restart-Computer -Force

        if (Test-Connection -ComputerName 10.0.0.33 -Quiet) { 

        Write-Host "proceeding"

        } else { 

        Write-Host "configure and turn on BEHDC1(10.0.0.33) first!" 

        exit

        }


# Turn off the firewall on the Public, Private, and Domain network profiles.

Set-NetFirewallProfile -Profile Domain,Private,Public -Enabled False

# Turn on RDP

Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0

# Put Wdigest creds back in memory

Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest' -name "UseLogonCredential" -value 1

# Turn on ANSI color bit

REG ADD HKCU\Console /v VirtualTerminalLevel /t REG_DWORD /d 1

# Set the RDP NLA setting to Disabled

(Get-WmiObject -class "Win32_TSGeneralSetting" -Namespace root\cimv2\terminalservices -ComputerName $env:computername -Filter "TerminalName='RDP-tcp'").SetUserAuthenticationRequired(0)

# Disable Defender

Set-MpPreference -DisableRealtimeMonitoring $true
New-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name DisableAntiSpyware -Value 1 -PropertyType DWORD -Force

# Install PSCredential object file

$User = "da-cynthia"
$Pass = ConvertTo-SecureString -String "Password123" -AsPlainText -Force
$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $Pass
$Credential | Export-Clixml -Path "C:\Users\Public\creds.xml"

# Check

$cred = Import-Clixml -Path "C:\Users\Public\creds.xml"
$cred.GetNetworkCredential().Password


#Join to testlab.local domain
#If this does not work in PS, you can do this via UI and add the Win10 to the domain following the information below.

$domain = "testlab"
$password = "Hyperdrive1" | ConvertTo-SecureString -asPlainText -Force
$username = "$domain\da-bobjones" 
$credential = New-Object System.Management.Automation.PSCredential($username,$password)
Add-Computer -DomainName $domain -Credential $credential
Restart-Computer -Force
Set-MpPreference -DisableRealtimeMonitoring $true


# Add user to rdp users 
Add-LocalGroupMember -Group "Remote Desktop Users" -Member "bobjones"

# Vuln Service Unquoted Service Path

New-Item -ItemType directory -Path "C:\Program Files\Fake Service\Fake Service 9.0" 

sc.exe create "vulnservice" binPath="C:\Program Files\Fake Service\Fake Service 9.0\Fake.exe" start=auto DisplayName="Fake Service"

icacls.exe "C:\Program Files\Fake Service" /grant bobjones:rw

# Vuln Service Weak Service Permissions 
# Make dir
if (Test-Path -Path "C:\Program Files\VulnService\Vuln Service 5.6") 
{
  Break
} else 
{ New-Item -ItemType directory -Path "C:\Program Files\VulnService\Vuln Service 5.6"
}

# Install chocolatey

Set-ExecutionPolicy Bypass -Scope Process -Force; iwr https://community.chocolatey.org/install.ps1 -UseBasicParsing | iex 

choco install sysinternals --params "/Install Dir:C:\Users\Public\sysinternals" -y --force

choco install visualstudio2019community -y --force

#Download Vulnserver

Invoke-WebRequest -Uri "https://github.com/stephenbradshaw/vulnserver/blob/master/essfunc.dll?raw=true" -OutFile "C:\Users\Public\essfunc.dll" | Out-Null

#Check Hash. You may need to run this using Windows Powershell ISE in Admin priv

$check2 = Get-FileHash -Algorithm MD5 "C:\Users\Public\essfunc.dll"

        if ($check2.Hash -eq "4E47AEAC37BCCD2F5E635CCC20E2F5B8") {
      
        } else {

           Write-Host "hash not the same for vulnserver: essfunc.dll!"
        }

#Install MySQL 
choco install mysql -y | Out-Null

#Check mysql installation
Browse to C:\Tools\mysql\current\ 
If you have files and folders here, it is good to go. 


# Connector/NET is a fully-managed ADO.NET driver for MySQL
Invoke-WebRequest -Uri "https://dev.mysql.com/get/Downloads/Connector-Net/mysql-connector-net-8.0.26.msi" -OutFile "C:\Users\Public\mysql-connector-net-8.0.26.msi" | Out-Null

msiexec.exe  /I "C:\Users\Public\mysql-connector-net-8.0.26.msi" /quiet

# Connect to the libaray MySQL.Data.dll

Add-Type -Path 'C:\Program Files (x86)\MySQL\MySQL Connector Net 8.0.26\Assemblies\v4.5.2\MySql.Data.dll'

$Conn = [MySql.Data.MySqlClient.MySqlConnection]@{ConnectionString='server=127.0.0.1;uid=root;pwd=;database='}
#If you get an error such as unable to connect to mysql instance, run "C:\tools\mysql\bin\mysqld"

$Conn.Open()

$sql = New-Object MySql.Data.MySqlClient.MySqlCommand

        $sql.Connection = $Conn

        $sql.CommandText = 'CREATE DATABASE vulnerable_stuff;'

        $sql.ExecuteNonQuery()

        $sql.CommandText =  'USE vulnerable_stuff;'

        $sql.ExecuteNonQuery()

        $sql.CommandText = 'CREATE TABLE credentials (username VARCHAR(20), password VARCHAR(41));'

        $sql.ExecuteNonQuery()

        $sql.CommandText ='INSERT INTO credentials (username, password) VALUES ("wa-travisb","70efa86d5b7f38a48368d2dc3c32c296");'

        $sql.ExecuteNonQuery()
        $sql.CommandText ="ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';"
        $sql.ExecuteNonQuery()

$Conn.Close()

Set-MpPreference -DisableRealtimeMonitoring $true

# Add local admins

Add-LocalGroupMember -Group "Administrators" -Member "testlab\wa-travisb"
Add-LocalGroupMember -Group "Administrators" -Member "testlab\wa-kennyp"

# Install vs studio comm 2019 
choco install visualstudio2019community -y

# Download mona

Invoke-WebRequest -Uri "https://raw.githubusercontent.com/corelan/mona/master/mona.py" -OutFile "C:\Users\Public\mona.py"

# Install python3

choco install python3 -y | Out-Null; choco install pip3 -y | Out-Null;refreshenv | Out-Null 

choco install dotnet3.5 -y

# Restart for changes to take effect
Restart-Computer -Force

#Install Immunity Debugger
Download and install Immunity Debugger (free) from www.immunityinc.com/products/debugger.
Download it here -> https://u.pcloud.link/publink/show?code=kZyF2GVZ4TXEUUWXIShJnt8hNEX0Dh54LoQk

#While installing Immunity, it may ask you to install Python 2.7.1, go ahead and proceed. 

Open a new PowerShell ISE window with Administrator privileges. Run this line in PowerShell.

Copy-Item -Path "C:\Users\Public\mona.py" -Destination "C:\Program Files (x86)\Immunity Inc\Immunity Debugger\PyCommands"

#Install Weak Permissions Service
In order to install this vulnerability, we need to find out the unique SID value for the domain. Once you run the “whoami /user” command plug this value into the final command you see below, where you see $sidVALUE.
Open a new PowerShell ISE window with Administrator privileges. Run these lines in PowerShell.

Set-MpPreference -DisableRealtimeMonitoring $true

sc.exe create "vulnservice2" binPath="C:\Program Files\VulnService\Vuln Service 5.6\vs.exe" start=auto DisplayName="Vuln Service 2"

# Get SID value, put where $sidVALUE is in next command
whoami /user

sc.exe sdset vulnservice2 "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$sidVALUE)"



















